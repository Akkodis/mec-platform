# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.source_location_info import SourceLocationInfo  # noqa: F401,E501
from openapi_server import util


class DataSourceInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, source_id: str=None, source_type: str=None, time_registration: int=None, time_last_update: int=None, source_timezone: int=None, source_stratum_level: int=None, source_location_info: SourceLocationInfo=None):  # noqa: E501
        """DataSourceInfo - a model defined in Swagger

        :param source_id: The source_id of this DataSourceInfo.  # noqa: E501
        :type source_id: str
        :param source_type: The source_type of this DataSourceInfo.  # noqa: E501
        :type source_type: int
        :param time_registration: The time_registration of this DataSourceInfo.  # noqa: E501
        :type time_registration: int
        :param time_last_update: The time_last_update of this DataSourceInfo.  # noqa: E501
        :type time_last_update: int
        :param source_timezone: The source_timezone of this DataSourceInfo.  # noqa: E501
        :type source_timezone: int
        :param source_stratum_level: The source_stratum_level of this DataSourceInfo.  # noqa: E501
        :type source_stratum_level: int
        :param source_location_info: The source_location_info of this DataSourceInfo.  # noqa: E501
        :type source_location_info: SourceLocationInfo
        """
        self.swagger_types = {
            'source_id': str,
            'source_type': str,
            'time_registration': int,
            'time_last_update': int,
            'source_timezone': int,
            'source_stratum_level': int,
            'source_location_info': SourceLocationInfo
        }

        self.attribute_map = {
            'source_id': 'sourceId',
            'source_type': 'sourceType',
            'time_registration': 'timeRegistration',
            'time_last_update': 'timeLastUpdate',
            'source_timezone': 'timeZone',
            'source_stratum_level': 'timeStratumLevel',
            'source_location_info': 'sourceLocationInfo'
        }
        self._source_id = source_id
        self._source_type = source_type
        self._time_registration = time_registration
        self._time_last_update = time_last_update
        self._source_timezone = source_timezone
        self._source_stratum_level = source_stratum_level
        self._source_location_info = source_location_info

    @classmethod
    def from_dict(cls, dikt) -> 'DataSourceInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataSourceInfo of this DataSourceInfo.  # noqa: E501
        :rtype: DataSourceInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_id(self) -> str:
        """Gets the source_id of this DataSourceInfo.


        :return: The source_id of this DataSourceInfo.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id: str):
        """Sets the source_id of this DataSourceInfo.


        :param source_id: The source_id of this DataSourceInfo.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")  # noqa: E501

        self._source_id = source_id

    @property
    def source_type(self) -> str:
        """Gets the source_type of this DataSourceInfo.


        :return: The source_type of this DataSourceInfo.
        :rtype: int
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type: str):
        """Sets the source_type of this DataSourceInfo.


        :param source_type: The source_type of this DataSourceInfo.
        :type source_type: int
        """
        if source_type is None:
            raise ValueError("Invalid value for `source_type`, must not be `None`")  # noqa: E501

        self._source_type = source_type

    @property
    def time_registration(self) -> int:
        """Gets the time_registration of this DataSourceInfo.


        :return: The time_registration of this DataSourceInfo.
        :rtype: int
        """
        return self._time_registration

    @time_registration.setter
    def time_registration(self, time_registration: int):
        """Sets the time_registration of this DataSourceInfo.


        :param time_registration: The time_registration of this DataSourceInfo.
        :type time_registration: int
        """
        if time_registration is None:
            raise ValueError("Invalid value for `time_registration`, must not be `None`")  # noqa: E501

        self._time_registration = time_registration

    @property
    def time_last_update(self) -> int:
        """Gets the time_last_update of this DataSourceInfo.


        :return: The time_last_update of this DataSourceInfo.
        :rtype: int
        """
        return self._time_last_update

    @time_last_update.setter
    def time_last_update(self, time_last_update: int):
        """Sets the time_last_update of this DataSourceInfo.


        :param time_last_update: The time_last_update of this DataSourceInfo.
        :type time_last_update: int
        """
        if time_last_update is None:
            raise ValueError("Invalid value for `time_last_update`, must not be `None`")  # noqa: E501

        self._time_last_update = time_last_update

    @property
    def source_timezone(self) -> int:
        """Gets the source_timezone of this DataSourceInfo.


        :return: The source_timezone of this DataSourceInfo.
        :rtype: int
        """
        return self._source_timezone

    @source_timezone.setter
    def source_timezone(self, source_timezone: int):
        """Sets the source_timezone of this DataSourceInfo.


        :param source_timezone: The source_timezone of this DataSourceInfo.
        :type source_timezone: int
        """

        self._source_timezone = source_timezone

    @property
    def source_stratum_level(self) -> int:
        """Gets the source_stratum_level of this DataSourceInfo.


        :return: The source_stratum_level of this DataSourceInfo.
        :rtype: int
        """
        return self._source_stratum_level

    @source_stratum_level.setter
    def source_stratum_level(self, source_stratum_level: int):
        """Sets the source_stratum_level of this DataSourceInfo.


        :param source_stratum_level: The source_stratum_level of this DataSourceInfo.
        :type source_stratum_level: int
        """

        self._source_stratum_level = source_stratum_level

    @property
    def source_location_info(self) -> SourceLocationInfo:
        """Gets the source_location_info of this DataSourceInfo.


        :return: The source_location_info of this DataSourceInfo.
        :rtype: SourceLocationInfo
        """
        return self._source_location_info

    @source_location_info.setter
    def source_location_info(self, source_location_info: SourceLocationInfo):
        """Sets the source_location_info of this DataSourceInfo.


        :param source_location_info: The source_location_info of this DataSourceInfo.
        :type source_location_info: SourceLocationInfo
        """
        if source_location_info is None:
            raise ValueError("Invalid value for `source_location_info`, must not be `None`")  # noqa: E501

        self._source_location_info = source_location_info
