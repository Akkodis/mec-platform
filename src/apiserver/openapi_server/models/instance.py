# coding: utf-8

from openapi_server.config.config import db, ma
from datetime import datetime

class Instance(db.Model):
    __tablename__ = "instance"
    instance_id = db.Column(db.String(255), primary_key=True)
    instance_date = db.Column(db.DateTime(timezone=True), default=datetime.utcnow, onupdate=datetime.utcnow)
    instance_type = db.Column(db.String(255), db.ForeignKey("type.type_name"))
    instance_reference = db.Column(db.String(255))
    datatype = db.Column(db.String(255))
    username = db.Column(db.String(255))

class InstanceSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = Instance
        load_instance = True
        include_fk = True
        sqla_session = db.session


# from __future__ import absolute_import
# from datetime import date, datetime  # noqa: F401

# from typing import List, Dict  # noqa: F401

# from openapi_server.models.base_model_ import Model
# from openapi_server import util


# class Instance(Model):
#     """NOTE: This class is auto generated by the swagger code generator program.

#     Do not edit the class manually.
#     """
#     def __init__(self, datatype: str=None, instance_type: str=None, username: str=None):  # noqa: E501
#         """Instance - a model defined in Swagger

#         :param datatype: The datatype of this Instance.  # noqa: E501
#         :type datatype: str
#         :param instance_type: The instance_type of this Instance.  # noqa: E501
#         :type instance_type: str
#         :param username: The username of this Instance.  # noqa: E501
#         :type username: str
#         """
#         self.swagger_types = {
#             'datatype': str,
#             'instance_type': str,
#             'username': str
#         }

#         self.attribute_map = {
#             'datatype': 'datatype',
#             'instance_type': 'instance_type',
#             'username': 'username'
#         }
#         self._datatype = datatype
#         self._instance_type = instance_type
#         self._username = username

#     @classmethod
#     def from_dict(cls, dikt) -> 'Instance':
#         """Returns the dict as a model

#         :param dikt: A dict.
#         :type: dict
#         :return: The Instance of this Instance.  # noqa: E501
#         :rtype: Instance
#         """
#         return util.deserialize_model(dikt, cls)

#     @property
#     def datatype(self) -> str:
#         """Gets the datatype of this Instance.

#         Requested datatype  # noqa: E501

#         :return: The datatype of this Instance.
#         :rtype: str
#         """
#         return self._datatype

#     @datatype.setter
#     def datatype(self, datatype: str):
#         """Sets the datatype of this Instance.

#         Requested datatype  # noqa: E501

#         :param datatype: The datatype of this Instance.
#         :type datatype: str
#         """
#         if datatype is None:
#             raise ValueError("Invalid value for `datatype`, must not be `None`")  # noqa: E501

#         self._datatype = datatype

#     @property
#     def instance_type(self) -> str:
#         """Gets the instance_type of this Instance.

#         Requested instance type  # noqa: E501

#         :return: The instance_type of this Instance.
#         :rtype: str
#         """
#         return self._instance_type

#     @instance_type.setter
#     def instance_type(self, instance_type: str):
#         """Sets the instance_type of this Instance.

#         Requested instance type  # noqa: E501

#         :param instance_type: The instance_type of this Instance.
#         :type instance_type: str
#         """
#         if instance_type is None:
#             raise ValueError("Invalid value for `instance_type`, must not be `None`")  # noqa: E501

#         self._instance_type = instance_type

#     @property
#     def username(self) -> str:
#         """Gets the username of this Instance.

#         5GMETA platform's client username  # noqa: E501

#         :return: The username of this Instance.
#         :rtype: str
#         """
#         return self._username

#     @username.setter
#     def username(self, username: str):
#         """Sets the username of this Instance.

#         5GMETA platform's client username  # noqa: E501

#         :param username: The username of this Instance.
#         :type username: str
#         """
#         if username is None:
#             raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

#         self._username = username
