# coding: utf-8

from openapi_server.config.config import db, ma

class InstanceType(db.Model):
    __tablename__ = "type"
    type_id = db.Column(db.Integer, primary_key=True)
    type_name = db.Column(db.String(255), unique=True)
    cpu = db.Column(db.Integer)
    memory = db.Column(db.Integer)
    gpu = db.Column(db.Boolean)

class InstanceTypeSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = InstanceType
        load_instance = True
        sqla_session = db.session


# from __future__ import absolute_import
# from datetime import date, datetime  # noqa: F401

# from typing import List, Dict  # noqa: F401

# from openapi_server.models.base_model_ import Model
# from openapi_server import util


# class InstanceType(Model):
#     """NOTE: This class is auto generated by the swagger code generator program.

#     Do not edit the class manually.
#     """
#     def __init__(self, type_name: str=None, cpu: int=None, memory: int=None, gpu: bool=None):  # noqa: E501
#         """InstanceType - a model defined in Swagger

#         :param type_name: The type_name of this InstanceType.  # noqa: E501
#         :type type_name: str
#         :param cpu: The cpu of this InstanceType.  # noqa: E501
#         :type cpu: int
#         :param memory: The memory of this InstanceType.  # noqa: E501
#         :type memory: int
#         :param gpu: The gpu of this InstanceType.  # noqa: E501
#         :type gpu: bool
#         """
#         self.swagger_types = {
#             'type_name': str,
#             'cpu': int,
#             'memory': int,
#             'gpu': bool
#         }

#         self.attribute_map = {
#             'type_name': 'type_name',
#             'cpu': 'cpu',
#             'memory': 'memory',
#             'gpu': 'gpu'
#         }
#         self._type_name = type_name
#         self._cpu = cpu
#         self._memory = memory
#         self._gpu = gpu

#     @classmethod
#     def from_dict(cls, dikt) -> 'InstanceType':
#         """Returns the dict as a model

#         :param dikt: A dict.
#         :type: dict
#         :return: The InstanceType of this InstanceType.  # noqa: E501
#         :rtype: InstanceType
#         """
#         return util.deserialize_model(dikt, cls)

#     @property
#     def type_name(self) -> str:
#         """Gets the type_name of this InstanceType.

#         Instance Type  # noqa: E501

#         :return: The type_name of this InstanceType.
#         :rtype: str
#         """
#         return self._type_name

#     @type_name.setter
#     def type_name(self, type_name: str):
#         """Sets the type_name of this InstanceType.

#         Instance Type  # noqa: E501

#         :param type_name: The type_name of this InstanceType.
#         :type type_name: str
#         """
#         if type_name is None:
#             raise ValueError("Invalid value for `type_name`, must not be `None`")  # noqa: E501

#         self._type_name = type_name

#     @property
#     def cpu(self) -> int:
#         """Gets the cpu of this InstanceType.

#         CPU number  # noqa: E501

#         :return: The cpu of this InstanceType.
#         :rtype: int
#         """
#         return self._cpu

#     @cpu.setter
#     def cpu(self, cpu: int):
#         """Sets the cpu of this InstanceType.

#         CPU number  # noqa: E501

#         :param cpu: The cpu of this InstanceType.
#         :type cpu: int
#         """
#         if cpu is None:
#             raise ValueError("Invalid value for `cpu`, must not be `None`")  # noqa: E501

#         self._cpu = cpu

#     @property
#     def memory(self) -> int:
#         """Gets the memory of this InstanceType.

#         Total memory in GB  # noqa: E501

#         :return: The memory of this InstanceType.
#         :rtype: int
#         """
#         return self._memory

#     @memory.setter
#     def memory(self, memory: int):
#         """Sets the memory of this InstanceType.

#         Total memory in GB  # noqa: E501

#         :param memory: The memory of this InstanceType.
#         :type memory: int
#         """
#         if memory is None:
#             raise ValueError("Invalid value for `memory`, must not be `None`")  # noqa: E501

#         self._memory = memory

#     @property
#     def gpu(self) -> bool:
#         """Gets the gpu of this InstanceType.

#         GPU available  # noqa: E501

#         :return: The gpu of this InstanceType.
#         :rtype: bool
#         """
#         return self._gpu

#     @gpu.setter
#     def gpu(self, gpu: bool):
#         """Sets the gpu of this InstanceType.

#         GPU available  # noqa: E501

#         :param gpu: The gpu of this InstanceType.
#         :type gpu: bool
#         """
#         if gpu is None:
#             raise ValueError("Invalid value for `gpu`, must not be `None`")  # noqa: E501

#         self._gpu = gpu
