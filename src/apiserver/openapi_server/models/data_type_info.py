# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class DataTypeInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, data_type: str=None, data_sub_type: str=None):  # noqa: E501
        """DataTypeInfo - a model defined in Swagger

        :param data_type: The data_type of this DataTypeInfo.  # noqa: E501
        :type data_type: str
        :param data_sub_type: The data_sub_type of this DataTypeInfo.  # noqa: E501
        :type data_sub_type: str
        """
        self.swagger_types = {
            'data_type': str,
            'data_sub_type': str
        }

        self.attribute_map = {
            'data_type': 'dataType',
            'data_sub_type': 'dataSubType'
        }
        self._data_type = data_type
        self._data_sub_type = data_sub_type

    @classmethod
    def from_dict(cls, dikt) -> 'DataTypeInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataTypeInfo of this DataTypeInfo.  # noqa: E501
        :rtype: DataTypeInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_type(self) -> str:
        """Gets the data_type of this DataTypeInfo.


        :return: The data_type of this DataTypeInfo.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type: str):
        """Sets the data_type of this DataTypeInfo.


        :param data_type: The data_type of this DataTypeInfo.
        :type data_type: str
        """
        if data_type is None:
            raise ValueError("Invalid value for `data_type`, must not be `None`")  # noqa: E501

        self._data_type = data_type

    @property
    def data_sub_type(self) -> str:
        """Gets the data_sub_type of this DataTypeInfo.


        :return: The data_sub_type of this DataTypeInfo.
        :rtype: str
        """
        return self._data_sub_type

    @data_sub_type.setter
    def data_sub_type(self, data_sub_type: str):
        """Sets the data_sub_type of this DataTypeInfo.


        :param data_sub_type: The data_sub_type of this DataTypeInfo.
        :type data_sub_type: str
        """
        if data_sub_type is None:
            raise ValueError("Invalid value for `data_sub_type`, must not be `None`")  # noqa: E501

        self._data_sub_type = data_sub_type
