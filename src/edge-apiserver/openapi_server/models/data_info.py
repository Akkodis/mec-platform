# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class DataInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, data_flow_direction: str=None, data_format: str=None, data_sample_rate: float=None, extra_attributes: str=None):  # noqa: E501
        """DataInfo - a model defined in Swagger

        :param data_flow_direction: The data_flow_direction of this DataInfo.  # noqa: E501
        :type data_flow_direction: str
        :param data_format: The data_format of this DataInfo.  # noqa: E501
        :type data_format: str
        :param data_sample_rate: The data_sample_rate of this DataInfo.  # noqa: E501
        :type data_sample_rate: float
        :param extra_attributes: The extra_attributes of this DataInfo.  # noqa: E501
        :type extra_attributes: str
        """
        self.swagger_types = {
            'data_flow_direction': str,
            'data_format': str,
            'data_sample_rate': float,
            'extra_attributes': str
        }

        self.attribute_map = {
            'data_flow_direction': 'dataflowDirection',
            'data_format': 'dataFormat',
            'data_sample_rate': 'dataSampleRate',
            'extra_attributes': 'extraAttributes'
        }
        self._data_flow_direction = data_flow_direction
        self._data_format = data_format
        self._data_sample_rate = data_sample_rate
        self._extra_attributes = extra_attributes

    @classmethod
    def from_dict(cls, dikt) -> 'DataInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataInfo of this DataInfo.  # noqa: E501
        :rtype: DataInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_flow_direction(self) -> str:
        """Gets the data_flow_direction of this DataInfo.


        :return: The data_flow_direction of this DataInfo.
        :rtype: str
        """
        return self._data_flow_direction

    @data_flow_direction.setter
    def data_flow_direction(self, data_flow_direction: str):
        """Sets the data_flow_direction of this DataInfo.


        :param data_flow_direction: The data_flow_direction of this DataInfo.
        :type data_flow_direction: str
        """
        if data_flow_direction is None:
            raise ValueError("Invalid value for `data_flow_direction`, must not be `None`")  # noqa: E501

        self._data_flow_direction = data_flow_direction

    @property
    def data_format(self) -> str:
        """Gets the data_format of this DataInfo.


        :return: The data_format of this DataInfo.
        :rtype: str
        """
        return self._data_format

    @data_format.setter
    def data_format(self, data_format: str):
        """Sets the data_format of this DataInfo.


        :param data_format: The data_format of this DataInfo.
        :type data_format: str
        """

        self._data_format = data_format

    @property
    def data_sample_rate(self) -> float:
        """Gets the data_sample_rate of this DataInfo.


        :return: The data_sample_rate of this DataInfo.
        :rtype: float
        """
        return self._data_sample_rate

    @data_sample_rate.setter
    def data_sample_rate(self, data_sample_rate: float):
        """Sets the data_sample_rate of this DataInfo.


        :param data_sample_rate: The data_sample_rate of this DataInfo.
        :type data_sample_rate: float
        """
        if data_sample_rate is None:
            raise ValueError("Invalid value for `data_sample_rate`, must not be `None`")  # noqa: E501

        self._data_sample_rate = data_sample_rate

    @property
    def extra_attributes(self) -> str:
        """Gets the extra_attributes of this DataInfo.


        :return: The extra_attributes of this DataInfo.
        :rtype: str
        """
        return self._extra_attributes

    @extra_attributes.setter
    def extra_attributes(self, extra_attributes: str):
        """Sets the extra_attributes of this DataInfo.


        :param extra_attributes: The extra_attributes of this DataInfo.
        :type extra_attributes: str
        """

        self._extra_attributes = extra_attributes
