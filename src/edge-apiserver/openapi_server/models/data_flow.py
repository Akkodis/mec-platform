# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.data_info import DataInfo  # noqa: F401,E501
from openapi_server.models.data_source_info import DataSourceInfo  # noqa: F401,E501
from openapi_server.models.data_type_info import DataTypeInfo  # noqa: F401,E501
from openapi_server.models.license_info import LicenseInfo  # noqa: F401,E501
from openapi_server import util


class DataFlow(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, data_flow_id: str=None, data_type_info: DataTypeInfo=None, data_info: DataInfo=None, license_info: LicenseInfo=None, data_source_info: DataSourceInfo=None):  # noqa: E501
        """DataFlow - a model defined in Swagger

        :param data_flow_id: The data_flow_id of this DataFlow.  # noqa: E501
        :type data_flow_id: str
        :param data_type_info: The data_type_info of this DataFlow.  # noqa: E501
        :type data_type_info: DataTypeInfo
        :param data_info: The data_info of this DataFlow.  # noqa: E501
        :type data_info: DataInfo
        :param license_info: The license_info of this DataFlow.  # noqa: E501
        :type license_info: LicenseInfo
        :param data_source_info: The data_source_info of this DataFlow.  # noqa: E501
        :type data_source_info: DataSourceInfo
        """
        self.swagger_types = {
            'data_flow_id': str,
            'data_type_info': DataTypeInfo,
            'data_info': DataInfo,
            'license_info': LicenseInfo,
            'data_source_info': DataSourceInfo
        }

        self.attribute_map = {
            'data_flow_id': 'dataFlowId',
            'data_type_info': 'dataTypeInfo',
            'data_info': 'dataInfo',
            'license_info': 'licenseInfo',
            'data_source_info': 'dataSourceInfo'
        }
        self._data_flow_id = data_flow_id
        self._data_type_info = data_type_info
        self._data_info = data_info
        self._license_info = license_info
        self._data_source_info = data_source_info

    @classmethod
    def from_dict(cls, dikt) -> 'DataFlow':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataFlow of this DataFlow.  # noqa: E501
        :rtype: DataFlow
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_flow_id(self) -> str:
        """Gets the data_flow_id of this DataFlow.


        :return: The data_flow_id of this DataFlow.
        :rtype: str
        """
        return self._data_flow_id

    @data_flow_id.setter
    def data_flow_id(self, data_flow_id: str):
        """Sets the data_flow_id of this DataFlow.


        :param data_flow_id: The data_flow_id of this DataFlow.
        :type data_flow_id: str
        """
        if data_flow_id is None:
            raise ValueError("Invalid value for `data_flow_id`, must not be `None`")  # noqa: E501

        self._data_flow_id = data_flow_id

    @property
    def data_type_info(self) -> DataTypeInfo:
        """Gets the data_type_info of this DataFlow.


        :return: The data_type_info of this DataFlow.
        :rtype: DataTypeInfo
        """
        return self._data_type_info

    @data_type_info.setter
    def data_type_info(self, data_type_info: DataTypeInfo):
        """Sets the data_type_info of this DataFlow.


        :param data_type_info: The data_type_info of this DataFlow.
        :type data_type_info: DataTypeInfo
        """
        if data_type_info is None:
            raise ValueError("Invalid value for `data_type_info`, must not be `None`")  # noqa: E501

        self._data_type_info = data_type_info

    @property
    def data_info(self) -> DataInfo:
        """Gets the data_info of this DataFlow.


        :return: The data_info of this DataFlow.
        :rtype: DataInfo
        """
        return self._data_info

    @data_info.setter
    def data_info(self, data_info: DataInfo):
        """Sets the data_info of this DataFlow.


        :param data_info: The data_info of this DataFlow.
        :type data_info: DataInfo
        """
        if data_info is None:
            raise ValueError("Invalid value for `data_info`, must not be `None`")  # noqa: E501

        self._data_info = data_info

    @property
    def license_info(self) -> LicenseInfo:
        """Gets the license_info of this DataFlow.


        :return: The license_info of this DataFlow.
        :rtype: LicenseInfo
        """
        return self._license_info

    @license_info.setter
    def license_info(self, license_info: LicenseInfo):
        """Sets the license_info of this DataFlow.


        :param license_info: The license_info of this DataFlow.
        :type license_info: LicenseInfo
        """
        if license_info is None:
            raise ValueError("Invalid value for `license_info`, must not be `None`")  # noqa: E501

        self._license_info = license_info

    @property
    def data_source_info(self) -> DataSourceInfo:
        """Gets the data_source_info of this DataFlow.


        :return: The data_source_info of this DataFlow.
        :rtype: DataSourceInfo
        """
        return self._data_source_info

    @data_source_info.setter
    def data_source_info(self, data_source_info: DataSourceInfo):
        """Sets the data_source_info of this DataFlow.


        :param data_source_info: The data_source_info of this DataFlow.
        :type data_source_info: DataSourceInfo
        """
        if data_source_info is None:
            raise ValueError("Invalid value for `data_source_info`, must not be `None`")  # noqa: E501

        self._data_source_info = data_source_info
