# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class LicenseInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, license_type: str=None, license_geo_limit: str=None):  # noqa: E501
        """LicenseInfo - a model defined in Swagger

        :param license_type: The license_type of this LicenseInfo.  # noqa: E501
        :type license_type: str
        :param license_geo_limit: The license_geo_limit of this LicenseInfo.  # noqa: E501
        :type license_geo_limit: int
        """
        self.swagger_types = {
            'license_type': str,
            'license_geo_limit': str
        }

        self.attribute_map = {
            'license_type': 'licenseType',
            'license_geo_limit': 'licenseGeolimit'
        }
        self._license_type = license_type
        self._license_geo_limit = license_geo_limit

    @classmethod
    def from_dict(cls, dikt) -> 'LicenseInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LicenseInfo of this LicenseInfo.  # noqa: E501
        :rtype: LicenseInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def license_type(self) -> str:
        """Gets the license_type of this LicenseInfo.


        :return: The license_type of this LicenseInfo.
        :rtype: str
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type: str):
        """Sets the license_type of this LicenseInfo.


        :param license_type: The license_type of this LicenseInfo.
        :type license_type: str
        """
        if license_type is None:
            raise ValueError("Invalid value for `license_type`, must not be `None`")  # noqa: E501

        self._license_type = license_type

    @property
    def license_geo_limit(self) -> int:
        """Gets the license_geo_limit of this LicenseInfo.


        :return: The license_geo_limit of this LicenseInfo.
        :rtype: int
        """
        return self._license_geo_limit

    @license_geo_limit.setter
    def license_geo_limit(self, license_geo_limit: str):
        """Sets the license_geo_limit of this LicenseInfo.


        :param license_geo_limit: The license_geo_limit of this LicenseInfo.
        :type license_geo_limit: int
        """
        if license_geo_limit is None:
            raise ValueError("Invalid value for `license_geo_limit`, must not be `None`")  # noqa: E501

        self._license_geo_limit = license_geo_limit
