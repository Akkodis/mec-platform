# configure Connaisseur deployment
deployment:
  replicasCount: 1
### VALIDATORS ###
# validators are a set of configurations (types, public keys, authentication)
# that can be used for validating one or multiple images (or image signatures).
# they are tied to their respective image(s) via the image policy below. there
# are a few handy validators pre-configured.
validators:
  # static validator that allows each image
  - name: allow
    type: static
    approve: true
  # static validator that denies each image
  - name: deny
    type: static
    approve: false
  # 5gmeta validator
  - name: 5gmeta
    type: notaryv1
    host: notary.docker.io
    trust_roots:
    - name: default
      key: |
        -----BEGIN PUBLIC KEY-----
        <XXXXXXX>
        -----END PUBLIC KEY-----
    auth:
      username: '<user>'
      password: '<password>'
  # the `default` validator is used if no validator is specified in image policy
  - name: default
    type: notaryv1  # or other supported validator (e.g. "cosign")
    host: notary.docker.io # configure the notary server for notaryv1 or rekor url for cosign
    trust_roots:
    # # the `default` key is used if no key is specified in image policy
    #- name: default
    #  key: |  # enter your public key below
    #    -----BEGIN PUBLIC KEY-----
    #    <add your public key here>
    #    -----END PUBLIC KEY-----
    #cert: |  # in case the trust data host is using a self-signed certificate
    #  -----BEGIN CERTIFICATE-----
    #  ...
    #  -----END CERTIFICATE-----
    #auth:  # credentials in case the trust data requires authentication
    #  # either (preferred solution)
    #  secret_name: mysecret  # reference a k8s secret in the form required by the validator type (check the docs)
    #  # or (only for notaryv1 validator)
    #  username: myuser
    #  password: mypass
  # pre-configured nv1 validator for public notary from Docker Hub
  - name: dockerhub-basics
    type: notaryv1
    host: notary.docker.io
    trust_roots:
      # public key for official docker images (https://hub.docker.com/search?q=&type=image&image_filter=official)
      # !if not needed feel free to remove the key!
      - name: docker-official
        key: |
          -----BEGIN PUBLIC KEY-----
          <XXXXXXX>
          -----END PUBLIC KEY-----
      # public key securesystemsengineering repo including Connaisseur images
      # !this key is critical for Connaisseur!
      - name: securesystemsengineering-official
        key: |
          -----BEGIN PUBLIC KEY-----
          <XXXXXXX>
          -----END PUBLIC KEY-----

### IMAGE POLICY ###
# the image policy ties validators and images together whereby always only the most specific rule (pattern)
# is applied. specify if and how images should be validated by which validator via the validator name.
policy:
  - pattern: "*:*"
  - pattern: "docker.io/library/*:*"
    validator: dockerhub-basics
    with:
      trust_root: docker-official
  - pattern: "k8s.gcr.io/*:*"
    validator: allow
  - pattern: "docker.io/securesystemsengineering/*:*"
    validator: dockerhub-basics
    with:
      trust_root: securesystemsengineering-official
  - pattern: "docker.io/5gmeta/*:*"
    validator: 5gmeta

# in detection mode, deployment will not be denied, but only prompted
# and logged. this allows testing the functionality without
# interrupting operation.
detectionMode: false

# namespaced validation allows to restrict the namespaces that will be subject to Connaisseur verification.
# when enabled, based on namespaced validation mode ('ignore' or 'validate')
# - either all namespaces with label "securesystemsengineering.connaisseur/webhook=ignore" are ignored
# - or only namespaces with label "securesystemsengineering.connaisseur/webhook=validate" are validated.
# warning: enabling namespaced validation, allows roles with edit permission on a namespace to disable
# validation for that namespace
namespacedValidation:
  enabled: true
  mode: ignore  # 'ignore' or 'validate'
