---
- name: Deploy 5GMETA MEC Platform
  hosts: all
  vars:
    ansible_python_interpreter: /usr/bin/python3
    cloud_platform: your-cloud-platform-url
    datatypes:
      - helloworld
      - cits
      - image
      - video
    cloud_platform: "your-cloud-platform-url"
    southbound_ip: "The MEC Public IP" # IP for the communication with S&D
    northbound_ip: "The Cloud Platform Public IP" # Public IP for communication with the Cloud Platform
    tiles: # MEC tile coverage zoom: 6 - 18
      - "120202221322022302" # Example for Toulouse
      - "120202221322022301" # Example for Toulouse
#      - ""
    add_instances: true
    available_instance_types:
      - { type_name: small, cpu: 2, memory: 2, gpu: false } # SMALL: 2 vCPU, 2GB RAM, No GPU
      - { type_name: medium, cpu: 4, memory: 4, gpu: false } # MEDIUM: 4 vCPU, 4GB RAM, No GPU
      - { type_name: large, cpu: 8, memory: 4, gpu: false } # LARGE: 8 vCPU, 4GB RAM, No GPU
      - { type_name: advanced, cpu: 8, memory: 4, gpu: true } # ADVANCED: 8 vCPU, 4GB RAM, GPU
### OPTIONAL VARS ###
    messagebroker_port: 30673 #Default 5673
    videobroker_port: 31402 #Default 8443
    registrationapi_port: 443 #Default 12346
    edgeinstanceapi_port: 443
    organization: AKKODIS
    city: Blagnac
    latitude: "43.636398"
    longitude: "1.390600"

  tasks:

    - name: Download ETSI OSM installation Script
      ansible.builtin.get_url:
        url: https://osm-download.etsi.org/ftp/osm-17.0-seventeen/install_osm.sh
        dest: /tmp/install_osm.sh
        mode: '0777'

    - name: Install ETSI OSM
      ansible.builtin.shell: /tmp/install_osm.sh -y

    - name: Install apt packages
      ansible.builtin.apt:
        pkg:
        - python3-pip
        update_cache: yes
      become: true

    - name: Install Python pip packages
      ansible.builtin.pip:
        name: "{{ packages }}"
      vars:
        packages:
          - kubernetes
          - pycurl
          - pyGeoTile
          - prettytable
          - click

    - name: Copy the VNF Descriptions
      ansible.builtin.copy:
        src: ../../../../osm/vnfdescriptors/repository
        dest: /home/azureuser/
        owner: azureuser
        group: azureuser

    - name: Copy the Helm charts
      ansible.builtin.copy:
        src: ../../../../deploy/helm
        dest: /home/azureuser/
        owner: azureuser
        group: azureuser
   
    - name: Deploy  the 5GMETA MEC Platform modules
      kubernetes.core.helm:
        name: mec-platform
        release_namespace: osm
        create_namespace: false
        chart_ref: /home/azureuser/helm/mec-platform-chart

    - name: Get token for accessing cloud APIs
      ansible.builtin.uri:
        url: https://{{ cloud_platform }}/identity/realms/5gmeta/protocol/openid-connect/token
        validate_certs: false
        method: POST
        return_content: true
        headers:
          Content-Type: application/x-www-form-urlencoded
        body_format: form-urlencoded
        body:
          grant_type: password
          username: test-user-platform
          password: "test-user-platform-2024."
          client_id: 5gmeta_login
        creates: "{{ ansible_env.HOME }}/5gmeta/logs/services_registered"
      register: json_response
      changed_when: json_response.status | default(0) == 200

    - name: Set token variable
      ansible.builtin.set_fact:
        token: "{{ json_response.json.access_token }}"
      when: json_response is changed

    - name: Register MEC server in 5GMETA cloud
      ansible.builtin.uri:
        url: https://{{ cloud_platform }}/api/v1/mec
        validate_certs: false
        method: POST
        return_content: true
        headers:
          Authorization: "{{ 'Bearer ' + token }}"
        body_format: json
        body: { "geolocation": [], "lat": "{{ latitude }}", "lng": "{{ longitude }}", "name": "{{ city | default(city) }}", "organization": "{{ organization | default('Null') }}", "props": {}, "resources": { "cpu": "{{ ansible_processor_count | string }}", "gpu": "true", "memory": "{{ '{:0.2f}'.format(ansible_memory_mb.real.total | int / 1024) }}", "storage": "{{ '{:0.2f}'.format((ansible_mounts | selectattr('mount', 'equalto', '/') | list)[0].size_total | int / 1073741824) }}" }, "sb_services": [ { "description": "Message Broker", "ip": "{{ southbound_ip | default(ip) }}", "port": "{{ messagebroker_port | default(5673) }}", "service_name": "message-broker" }, { "description": "Video Stream Broker", "ip": "{{ southbound_ip | default(ip) }}", "port": "{{ videobroker_port | default(8443) }}", "service_name": "video-broker" }, { "description": "Registration API", "ip": "{{ southbound_ip | default(ip) }}", "port": "{{ registrationapi_port | default(12346) }}", "service_name": "registration-api" } ] }
      when: token is defined
      register: json_response
      changed_when: json_response.status == 200

    - name: "Set mec_id variable"
      ansible.builtin.set_fact:
        mec_id: "{{ json_response.json.mec_id }}"
      when: json_response.changed

    - name: Add tiles to MEC
      ansible.builtin.uri:
        url: https://{{ cloud_platform }}/api/v1/mec/{{ mec_id }}/tile/{{ item }}
        validate_certs: false
        method: POST
        headers:
          Authorization: "{{ 'Bearer ' + token }}"
      when: mec_id is defined and token is defined
      loop: "{{ tiles }}"

    - name: Register message-broker service in 5GMETA Cloud Platform
      ansible.builtin.uri:
        url: https://{{ cloud_platform }}/api/v1/mec/{{ mec_id }}/nbservices
        validate_certs: false
        method: POST
        return_content: true
        headers:
          Authorization: "{{ 'Bearer ' + token }}"
        body_format: json
        body: { "description": "Message Broker", "ip": "{{ northbound_ip | default(ip) }}", "port": "61616", "props": "{}", "service_name": "message-broker" }
      when: mec_id is defined and token is defined

    - name: Register edgeinstance-api service in 5GMETA Cloud Platform
      ansible.builtin.uri:
        validate_certs: false
        url: https://{{ cloud_platform }}/api/v1/mec/{{ mec_id }}/nbservices
        method: POST
        return_content: true
        headers:
          Authorization: "{{ 'Bearer ' + token }}"
        body_format: json
        body: { "description": "API to manage pipeline instances and instace types in a 5GMETA MEC Server", "ip": "{{ northbound_ip | default(ip) }}", "port": "443", "props": "{}", "service_name": "edgeinstance-api" }
      when: mec_id is defined and token is defined

    - name: Add available instance types
      ansible.builtin.uri:
        validate_certs: false
        url: https://{{ cloud_platform }}/api/v1/mecs/{{ mec_id }}/types
        validate_certs: false
        method: POST
        headers:
          Authorization: "{{ 'Bearer ' + token }}"
        body: '{{ item }}'
        body_format: json
      loop: "{{ available_instance_types }}"
      when: add_instances == true

    - name: "Final message"
      ansible.builtin.debug:
        msg:
  #        - Remember to add users to docker group with "usermod -aG docker <username>". Use "newgrp docker" to use the group immediately
          - "MEC stack correctly deployed, server registered in discovery module with ID {{ mec_id }}"
